/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 20 10:50:00 GMT 2024
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tutorial.Stack;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class StackTest extends StackTest_scaffolding {

    @Test(timeout = 4000)
    public void testStackIsEmptyWhenInitialized()  throws Throwable  {
        Stack<String> stack = new Stack<String>();
        assertTrue("Newly created stack should be empty", stack.isEmpty());

        stack.push("`!W/a/`.u  hPgPa6d");
        stack.push((String) null);
        stack.pop();
        assertFalse("Stack should not be empty after pushing and popping elements", stack.isEmpty());
    }

    @Test(timeout = 4000)
    public void testIsEmptyReturnsTrueForNewStack()  throws Throwable  {
        Stack<Object> stack = new Stack<Object>();
        boolean isEmpty = stack.isEmpty();
        assertTrue("Newly created stack should be empty", isEmpty);
    }

    @Test(timeout = 4000)
    public void testIsEmptyReturnsFalseAfterPush()  throws Throwable  {
        Stack<Object> stack = new Stack<Object>();
        assertTrue("Newly created stack should be empty", stack.isEmpty());

        Integer integer = new Integer((-1856));
        stack.push(integer);
        boolean isEmpty = stack.isEmpty();
        assertFalse("Stack should not be empty after pushing an element", isEmpty);
    }

    @Test(timeout = 4000)
    public void testPopThrowsEmptyStackExceptionForEmptyStack()  throws Throwable  {
        Stack<String> stack = new Stack<String>();
        // Expecting EmptyStackException
        try {
            stack.pop();
            fail("Expected EmptyStackException");
        } catch(EmptyStackException e) {
            // Exception occurred as expected
            verifyException("tutorial.Stack", e);
        }
    }

    @Test(timeout = 4000)
    public void testStackIsEmptyAfterPushAndPop()  throws Throwable  {
        Stack<String> stack = new Stack<String>();
        stack.push("\"LZ, uT'JK<y");
        assertFalse("Stack should not be empty after pushing an element", stack.isEmpty());

        stack.pop();
        assertTrue("Stack should be empty after pushing and popping all elements", stack.isEmpty());
    }

    @Test(timeout = 4000)
    public void testPushThrowsRuntimeExceptionWhenExceedingCapacity()  throws Throwable  {
        Stack<Object> stack = new Stack<Object>();
        Integer integer = new Integer((-1856));
        stack.push(integer);
        stack.push(integer);
        Object object = new Object();
        stack.push(object);
        stack.push((Object) null);
        stack.push(integer);
        stack.push("\"LZ, uT'JK<y");
        stack.push("\"LZ, uT'JK<y");
        stack.push("\"LZ, uT'JK<y");
        stack.push(integer);
        stack.push((Object) null);
        // Expecting RuntimeException
        try {
            stack.push("");
            fail("Expected RuntimeException");
        } catch(RuntimeException e) {
            // Exception occurred as expected
            verifyException("tutorial.Stack", e);
        }
    }
}
