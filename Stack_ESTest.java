/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 20 10:50:00 GMT 2024
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tutorial.Stack;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Stack_ESTest extends Stack_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void testStackIsEmptyAfterPushingAndPoppingItems() throws Throwable {
        Stack<String> testStack = new Stack<String>();
        assertTrue(testStack.isEmpty());

        testStack.push("`!W/a/`.u  hPgPa6d");
        testStack.push((String) null);
        testStack.pop();
        assertFalse(testStack.isEmpty());
    }

    @Test(timeout = 4000)
    public void testStackIsEmptyWhenCreated() throws Throwable {
        Stack<Object> testStack = new Stack<Object>();
        boolean isEmpty = testStack.isEmpty();
        assertTrue(isEmpty);
    }

    @Test(timeout = 4000)
    public void testStackIsNotEmptyAfterPushingAnItem() throws Throwable {
        Stack<Object> testStack = new Stack<Object>();
        assertTrue(testStack.isEmpty());

        Integer newItem = new Integer((-1856));
        testStack.push(newItem);
        boolean isEmptyAfterPush = testStack.isEmpty();
        assertFalse(isEmptyAfterPush);
    }

    @Test(timeout = 4000)
    public void testPopOnEmptyStackThrowsEmptyStackException() throws Throwable {
        Stack<String> testStack = new Stack<String>();
        // Undeclared exception!
        try {
            testStack.pop();
            fail("Expecting exception: EmptyStackException");

        } catch(EmptyStackException emptyStackException) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("tutorial.Stack", emptyStackException);
        }
    }

    @Test(timeout = 4000)
    public void testStackIsNotEmptyAfterPushingAndEmptyAfterPopping() throws Throwable {
        Stack<String> testStack = new Stack<String>();
        testStack.push("\"LZ, uT'JK<y");
        assertFalse(testStack.isEmpty());

        testStack.pop();
        assertTrue(testStack.isEmpty());
    }

    @Test(timeout = 4000)
    public void testPushingBeyondCapacityThrowsRuntimeException() throws Throwable {
        Stack<Object> testStack = new Stack<Object>();
        Integer testInteger = new Integer((-1856));
        testStack.push(testInteger);
        testStack.push(testInteger);
        Object testObject = new Object();
        testStack.push(testObject);
        testStack.push((Object) null);
        testStack.push(testInteger);
        testStack.push("\"LZ, uT'JK<y");
        testStack.push("\"LZ, uT'JK<y");
        testStack.push("\"LZ, uT'JK<y");
        testStack.push(testInteger);
        testStack.push((Object) null);

        // Undeclared exception!
        try {
            testStack.push("");
            fail("Expecting exception: RuntimeException");

        } catch(RuntimeException runtimeException) {
            //
            // Stack exceeded capacity!
            //
            verifyException("tutorial.Stack", runtimeException);
        }
    }
}
